Brute Force Approach:
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(int i=1;i<=n;i++)
    {
        int flag=0;
        for(int j=0;j<n-1;j++)
        {
            if(arr[j]==i)
            {
                flag=1;
                break;
            }
        }
        if(flag==0)
        {
            cout<<i;
        }
    }
}
Time complexity:O(n sq)
Space complexity:O(n)
Readability: Moderate, but less efficient due to nested loops.

Better Approach:
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int hash[n+1]={0};
    for(int i=0;i<n-1;i++)
    {
        hash[arr[i]]++;
    }
    for(int i=1;i<=n;i++)
    {
        if(hash[i]==0)
        {
            cout<<i;
        }
    }
    
}
Time Complexity:O(n)
Space Complexity:O(n)
Readability: Moderate, but it introduces additional complexity with hash arrays.

Optimal Approach:
#include<iostream>
#include<vector>
using namespace std;
int getSumOf(vector<int>&v,int n)
{
    int sum=0,total=(n*(n+1))/2;
    
    for(int i=0;i<n-1;i++)
    {
        sum+=v[i];
    }
    return total-sum;
}
int main()
{
    int n;
    cin>>n;
    vector<int>v(n-1);
    for(int i=0;i<n-1;i++)
    {
        cin>>v[i];
    }
    int ans=getSumOf(v,n);
    cout<<ans;
}
Time Complexity:O(n)
Space Complexity:O(n)
Readability: High, as it uses a simple mathematical formula.

Input:
5
1 2 4 5 6
Output:
3

